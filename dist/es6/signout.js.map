{"version":3,"file":"signout.js","sources":["../../src/api/client.js","../../src/api/auth.js","../../src/routes.js","../../src/views/signout.js"],"sourcesContent":["const API_URL = location.hostname.includes(\"localhost\")\r\n    ? \"http://localhost:5000\"\r\n    : \"\";\r\n\r\nexport default class ApiClient {\r\n    constructor(base_url, middleware) {\r\n        if (base_url === undefined || base_url === null) {\r\n            base_url = API_URL;\r\n        }\r\n        this.base_url = base_url;\r\n        if (middleware === null || middleware === undefined) {\r\n            middleware = [];\r\n        }\r\n        this.middleware = middleware;\r\n    }\r\n    request(uri, method, body, headers) {\r\n        let requestBody;\r\n        if (body !== null && body !== undefined) {\r\n            requestBody = JSON.stringify(body);\r\n        }\r\n        return fetch(\r\n            this.base_url + uri,\r\n            // Pass the request options to each middleware function for modification\r\n            this.middleware.reduce(\r\n                (requestOptions, middleware) => middleware(requestOptions),\r\n                {\r\n                    method: method,\r\n                    body: requestBody,\r\n                    headers: { \"Content-Type\": \"application/json\", ...headers }\r\n                }\r\n            )\r\n        );\r\n    }\r\n    get(uri, headers) {\r\n        return this.request(uri, \"GET\", null, headers);\r\n    }\r\n    post(uri, body) {\r\n        return this.request(uri, \"POST\", body);\r\n    }\r\n    put(uri, body) {\r\n        return this.request(uri, \"PUT\", body);\r\n    }\r\n    delete(uri, body) {\r\n        return this.request(uri, \"DELETE\", body);\r\n    }\r\n    patch(uri, body) {\r\n        return this.request(uri, \"PATCH\", body);\r\n    }\r\n}\r\n\r\nexport const client = new ApiClient(API_URL);\r\n\r\n/**\r\n * Given a bearer token, returns a middleware function to add to the API\r\n * client.\r\n * @param {string} token\r\n */\r\nexport function createAuthMiddleware(token) {\r\n    return request => {\r\n        request.headers.Authorization = `Bearer ${token}`;\r\n        return request;\r\n    };\r\n}\r\n","import { client, createAuthMiddleware } from \"./client\";\r\n\r\nexport function registerUser({ first, last, email }) {\r\n    return client.post(\"/register/\", { first, last, email });\r\n}\r\n\r\nexport function signInUser({ email }) {\r\n    return client.post(\"/signin/\", { email });\r\n}\r\n\r\nexport function signOut() {\r\n    localStorage.clear();\r\n}\r\n\r\n// Sentinel for when user cannot be authenticated (either has\r\n// no token or the token is not validated by the backend)\r\nexport const unauthenticatedUser = {};\r\n\r\n/**\r\n * Get user's identity and Bearer token. Equip the API client\r\n * with middleware that uses the Bearer token for authentication\r\n * and authorization, and return the user record.\r\n * @param {ApiClient} client\r\n * @returns {Object|unauthenticatedUser} the current user\r\n */\r\nexport default function initializeAuthContext(client) {\r\n    return getBearerToken().then(token =>\r\n        getCurrentUser(token).then(user => {\r\n            if (user === unauthenticatedUser) {\r\n                localStorage.removeItem(\"bearerToken\");\r\n            } else {\r\n                localStorage.setItem(\"bearerToken\", token);\r\n                client.middleware.push(createAuthMiddleware(token));\r\n            }\r\n            return user;\r\n        })\r\n    );\r\n}\r\n\r\n/**\r\n * Given a Bearer token, verifies that token with the API and retrieves\r\n * the user's profile.\r\n * @param {string|noBearerToken} token\r\n * @returns {Promise<Object|unauthenticatedUser>} the current user\r\n */\r\nfunction getCurrentUser(token) {\r\n    const user = getUserFromToken(token);\r\n    if (user !== unauthenticatedUser) {\r\n        return client\r\n            .get(`/users/${user.id}`, { Authorization: `Bearer ${token}` })\r\n            .then(r => {\r\n                if (r.ok) {\r\n                    return r.json();\r\n                } else {\r\n                    return unauthenticatedUser;\r\n                }\r\n            })\r\n            .catch(() => unauthenticatedUser);\r\n    } else {\r\n        return Promise.resolve(unauthenticatedUser);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a token, parse the encoded User object.\r\n * @param {string|noBearerToken} token\r\n * @returns {Object|unauthenticatedUser}\r\n */\r\nexport function getUserFromToken(token) {\r\n    if (token === noBearerToken) {\r\n        return unauthenticatedUser;\r\n    }\r\n    let user;\r\n    try {\r\n        user = atob(token.split(\".\")[1]);\r\n    } catch (error) {\r\n        // Catch encoding errors\r\n        user = null;\r\n    }\r\n    if (user === undefined || user === null) {\r\n        return unauthenticatedUser;\r\n    } else {\r\n        return JSON.parse(user);\r\n    }\r\n}\r\n\r\n// Sentinel for when the user has no bearer token\r\nexport const noBearerToken = {};\r\n\r\n/**\r\n * Retrieves Bearer token for authentication and authorization\r\n * with the Districtr API. Looks in localStorage first, and if that's\r\n * not there tries to use a sign-in token query parameter (from a\r\n * sign-in link) to get a Bearer token from the back-end.\r\n * @returns {Promise<string|noBearerToken>}\r\n */\r\nexport function getBearerToken() {\r\n    // Check localStorage for the Bearer token\r\n    let bearerToken = localStorage.getItem(\"bearerToken\");\r\n    if (bearerToken !== null && bearerToken !== undefined) {\r\n        return Promise.resolve(bearerToken);\r\n    }\r\n    // If that's missing, get signInToken from the URL query parameters\r\n    // and then POST that to /signin/ to get a Bearer token\r\n    const signInToken = getSignInToken();\r\n    if (signInToken !== noSignInToken) {\r\n        return fetchBearerToken(signInToken);\r\n    } else {\r\n        return Promise.resolve(noBearerToken);\r\n    }\r\n}\r\n\r\n/**\r\n * Given a sign-in token, fetch a Bearer token from the API to use\r\n * for auth in subsequent calls.\r\n * @param {string} signInToken\r\n * @returns {string|noBearerToken} the Bearer token, or sentinel\r\n *  noBearerToken that signals failure.\r\n */\r\nexport function fetchBearerToken(signInToken) {\r\n    return (\r\n        client\r\n            .post(\"/tokens/\", { token: signInToken })\r\n            // eslint-disable-next-line no-extra-parens\r\n            .then(r => (r.status === 201 ? r.json() : null))\r\n            .then(payload => {\r\n                if (payload === undefined || payload === null) {\r\n                    return noBearerToken;\r\n                }\r\n                const { token } = payload;\r\n                if (token === undefined || token === null) {\r\n                    return noBearerToken;\r\n                }\r\n                return token;\r\n            })\r\n            .catch(() => noBearerToken)\r\n    );\r\n}\r\n\r\n// Sentinel for when there is no sign-in token available\r\nconst noSignInToken = {};\r\n\r\n/**\r\n * Get a sign-in token from the location bar or return the sentinel\r\n * indicating that no token was there\r\n * @returns {string, noSignInToken}\r\n */\r\nfunction getSignInToken() {\r\n    if (location.search.length <= \"?token=\".length) {\r\n        return noSignInToken;\r\n    }\r\n    return location.search.slice(\"?token=\".length);\r\n}\r\n","import { listPlaces } from \"./api/mockApi\";\r\nimport { spatial_abilities } from \"./utils\";\r\n\r\nconst routes = {\r\n    \"/\": \"/\",\r\n    \"/new\": \"/new\",\r\n    \"/edit\": \"/edit\",\r\n    \"/embedded\": \"/embedded\",\r\n    \"/COI\": \"/COI\",\r\n    \"/plan\": \"/plan\",\r\n    \"/register\": \"/register\",\r\n    \"/request\": \"/request\",\r\n    \"/signin\": \"/signin\",\r\n    \"/signout\": \"/signout\",\r\n    \"/analysis\": \"/analysis\",\r\n    \"/evaluation\": \"/evaluation\",\r\n    \"/eval\": \"/eval\",\r\n    \"/coi-info\": \"/coi-info\"\r\n};\r\n\r\nexport function navigateTo(route) {\r\n    if (routes.hasOwnProperty(route) || route.includes(\"?event=\")) {\r\n        location.assign(routes[route] || route);\r\n    } else {\r\n        throw Error(\"The requested route does not exist: \" + route);\r\n    }\r\n}\r\n\r\nexport function startNewPlan(place, problem, units, id, setParts, eventCode, portalOn) {\r\n    if (setParts) {\r\n        problem.numberOfParts = setParts;\r\n    }\r\n    savePlanToStorage({ place, problem, units, id });\r\n    let action = (window.location.hostname === \"localhost\" ? \"edit\" : (\r\n      problem.type === \"community\" ? \"COI\" : \"plan\"\r\n    ));\r\n    if (portalOn) {\r\n      eventCode += \"&portal\";\r\n    }\r\n    navigateTo(eventCode ? (`/${action}?event=${eventCode}`) : `/${action}`);\r\n}\r\n\r\nexport function savePlanToStorage({\r\n    place,\r\n    problem,\r\n    units,\r\n    id,\r\n    assignment,\r\n    name,\r\n    description,\r\n    parts\r\n}) {\r\n    const state = {\r\n        place,\r\n        problem,\r\n        units,\r\n        id,\r\n        assignment,\r\n        name,\r\n        description,\r\n        parts\r\n    };\r\n    if (!window.location.href.includes(\"embed\")) {\r\n        localStorage.setItem(\"savedState\", JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport function savePlanToDB(state, eventCode, planName, callback, forceNotScratch) {\r\n    const serialized = state.serialize(),\r\n        mapID = window.location.pathname.split(\"/\").slice(-1)[0],\r\n        token = localStorage.getItem(\"districtr_token_\" + mapID) || \"\",\r\n        createdAfter = (new Date() * 1) - 24 * 60 * 60 * 1000,\r\n        tokenValid = (token && (token !== \"null\")\r\n            && (token.split(\"_\")[1] * 1 > createdAfter)),\r\n        saveURL = tokenValid\r\n            ? (\"/.netlify/functions/planUpdate?id=\" + mapID)\r\n            : \"/.netlify/functions/planCreate\",\r\n        requestBody = {\r\n            plan: JSON.parse(JSON.stringify(serialized)),\r\n            token: token.split(\"_\")[0],\r\n            eventCode: eventCode,\r\n            planName: planName,\r\n            isScratch: (document.getElementById(\"is-scratch\") || {}).checked || (eventCode && !forceNotScratch),\r\n            hostname: window.location.hostname\r\n        };\r\n    // VA fix - if precinct IDs are strings, escape any \".\"\r\n    Object.keys(requestBody.plan.assignment || {}).forEach(key => {\r\n        if (typeof key === \"string\" && key.indexOf(\".\") > -1) {\r\n            requestBody.plan.assignment[key.replace(/\\./g, \"÷\")] =\r\n                requestBody.plan.assignment[key];\r\n            delete requestBody.plan.assignment[key];\r\n        }\r\n    });\r\n    fetch(saveURL, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(requestBody)\r\n    })\r\n    .then(res => res.json())\r\n    .then(info => {\r\n        if (info.simple_id) {\r\n            let action = (window.location.hostname === \"localhost\" ? \"edit\" : (\r\n              serialized.problem.type === \"community\" ? \"COI\" : \"plan\"\r\n            ));\r\n            let extras = \"\";\r\n            if (window.location.href.includes(\"portal\")) {\r\n                extras = \"?portal\";\r\n            } else if (window.location.href.includes(\"qa-portal\")) {\r\n                extras = \"?qa-portal\";\r\n            } else if (window.location.href.includes(\"event\")) {\r\n                const eventdefault = window.location.href.split(\"event=\")[1].split(\"&\")[0].split(\"#\")[0];\r\n                extras = \"?event=\" + eventdefault;\r\n            }\r\n            history.pushState({}, \"Districtr\", `/${action}/${info.simple_id}${extras}`);\r\n            if (info.token && localStorage) {\r\n                localStorage.setItem(\"districtr_token_\" + info.simple_id, info.token + \"_\" + (1 * new Date()));\r\n            }\r\n            if (spatial_abilities(state.place.id).shapefile) {\r\n                // screenshot\r\n                if (\r\n                  (state.place.id === state.place.state.toLowerCase() &&\r\n                  [\"blockgroups20\", \"vtds20\"].includes(state.unitsRecord.id))\r\n                    || [\"new_mexico\", \"new_mexico_portal\"].includes(state.place.id)\r\n                ) {\r\n                    fetch(\"https://gvd4917837.execute-api.us-east-1.amazonaws.com/plan_thumbnail\", {\r\n                      method: 'POST',\r\n                      mode: 'cors',\r\n                      headers: {\r\n                        'Content-Type': 'application/json',\r\n                      },\r\n                      body: JSON.stringify({ id: info.simple_id }),\r\n                    }).then((res) => res.text()).then(f => console.log('saved image'))\r\n                } else {\r\n                    fetch(\"//mggg.pythonanywhere.com/picture2?id=\" + info.simple_id).then((res) => res.text()).then(f => console.log('saved image'))\r\n                }\r\n            }\r\n            callback(info.simple_id, action);\r\n        } else {\r\n            callback(null);\r\n        }\r\n    })\r\n    .catch(e => callback(null));\r\n}\r\n\r\nexport function getContextFromStorage() {\r\n    const savedState = window.location.href.includes(\"embed\")\r\n        ? null\r\n        : localStorage.getItem(\"savedState\");\r\n    let state;\r\n    try {\r\n        state = JSON.parse(savedState);\r\n//         if (state.place && state.units && state.units.columnSets && (state.place.id === \"new_mexico\") && window.location.href.includes(\"portal\")) {\r\n//             state.units.columnSets = state.units.columnSets.filter(c => c.type !== \"election\");\r\n//         }\r\n    } catch (e) {\r\n        localStorage.removeItem(\"savedState\");\r\n        navigateTo(\"/new\");\r\n    }\r\n\r\n    if (state === null || state === undefined) {\r\n        navigateTo(\"/new\");\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport function loadPlanFromJSON(planRecord) {\r\n    if (planRecord.msg && planRecord.plan) {\r\n        // retrieved from database\r\n        console.log(planRecord.msg);\r\n        planRecord = planRecord.plan;\r\n    }\r\n    window.nycKeeps = {};\r\n    Object.keys(planRecord.assignment || {}).forEach((key) => {\r\n        if (String(key).includes('÷')) {\r\n            let newKey = key.replace(/÷/g, \".\");\r\n            planRecord.assignment[newKey] = planRecord.assignment[key];\r\n            delete planRecord.assignment[key];\r\n        }\r\n        let colorAssigned = planRecord.assignment[key];\r\n        if (!window.nycKeeps[String(colorAssigned)]) {\r\n          window.nycKeeps[String(colorAssigned)] = { added: [Number(key)], removed: [] };\r\n        } else {\r\n          window.nycKeeps[String(colorAssigned)].added.push(Number(key));\r\n        }\r\n    });\r\n\r\n    if (planRecord.placeId === \"nc\") {\r\n        planRecord.placeId = \"northcarolina\";\r\n    }\r\n    return listPlaces(planRecord.placeId, (planRecord.state || (planRecord.place ? planRecord.place.state : null))).then(places => {\r\n        const place = places.find(p => String(p.id).replace(/÷/g, \".\") === String(planRecord.placeId));\r\n        if (place) {\r\n            place.landmarks = (planRecord.place || {}).landmarks;\r\n            planRecord.units = place.units.find(u => (u.name === planRecord.units.name) || (u.name === \"Wards\" && planRecord.units.name === \"2011 Wards\") || (u.name === \"2011 Wards\" && planRecord.units.name === \"Wards\"));\r\n        }\r\n//         if (planRecord.place && (planRecord.place.id === \"new_mexico\") && planRecord.units && planRecord.units.columnSets && window.location.href.includes(\"portal\")) {\r\n//             // hide election data on New Mexico portal maps\r\n//             planRecord.units.columnSets = planRecord.units.columnSets.filter(c => c.type !== \"election\");\r\n//         }\r\n        return {\r\n            ...planRecord,\r\n            place\r\n        };\r\n    });\r\n}\r\n\r\nexport function loadPlanFromCSV(assignmentList, state) {\r\n    let rows = assignmentList.trim().split(/\\r?\\n/);\r\n    let headers = rows[0].replace(/\"/g, \"\").trim().split(\",\");\r\n    if (\r\n        headers[0].indexOf(\"id-\") === 0\r\n        && headers[0].split(\"-\").length === 5\r\n    ) {\r\n        // new format, verify units match\r\n        //id-state.place.id-state.units.id\r\n        let cols = headers[0].split(\"-\");\r\n        let placeId = cols[1],\r\n            unitId = cols[2],\r\n            partCount = cols[3],\r\n            pluralType = cols[4];\r\n        if (unitId.includes(\"_\")) {\r\n            unitId = unitId.split(\"_\").slice(-1)[0];\r\n        }\r\n\r\n        if (placeId !== state.place.id) {\r\n            throw new Error(\"CSV is for a different module (another state or region).\");\r\n        } else if (unitId !== state.units.id.split(\"_\").slice(-1)[0]) {\r\n            throw new Error(\"CSV is for this module but a different unit map (e.g. blocks, precincts).\");\r\n        }\r\n        // else if (pluralType !== state.problem.pluralNoun.replace(/\\s+/g, \"\")) {\r\n        //     throw new Error(\"CSV is for this module but a different division map (e.g. districts)\");\r\n        // }\r\n        state.problem.numberOfParts = partCount * 1;\r\n    } else if (!headers[1].match(/\\d/) && headers[1].length !== 1) {\r\n        // Sept 2021 fix, no numbers in first line = useless header\r\n        console.log(\"custom header\");\r\n    } else {\r\n        // old format, no column headers\r\n        headers = null;\r\n    }\r\n    let planRecord = state;\r\n    planRecord.assignment = {};\r\n\r\n    const delimiter = (state.place.id === \"louisiana\") ? \";\" : \",\";\r\n\r\n    let districtIds = new Set(rows.slice(1).map((row, index) => row.split(delimiter)[1].split(\"_\")[0] ));\r\n    if (headers) {districtIds.delete(rows[0].split(delimiter)[1]);}\r\n    districtIds.delete(undefined);\r\n\r\n    let distMap = Array.from(districtIds.values());\r\n    (!isNaN(distMap[0] - distMap[1])) ? distMap.sort((a, b) => a - b) : distMap.sort();\r\n\r\n    // if we didn't set numberOfParts in CSV, find max here\r\n    state.problem.numberOfParts =  Math.max(state.problem.numberOfParts, distMap.length)\r\n\r\n    if (state.place.id === \"nc\") {\r\n        state.place.id = \"northcarolina\";\r\n    }\r\n    return listPlaces(state.place.id, state.place.state).then(places => {\r\n        rows.forEach((row, index) => {\r\n            if (index > 0 || !headers) {\r\n                let cols = row.split(delimiter),\r\n                    val = cols[1].split(\"_\"),\r\n                    key = (isNaN(cols[0] * 1) || cols[0].match(/[^0-9]/) || cols[0][0] === \"0\")\r\n                        ? cols[0]\r\n                        : cols[0] * 1;\r\n                if (!cols[1].match(/\\d/) && cols[1].length !== 1) {\r\n                    console.log(\"no assigned value in row \" + index);\r\n                    return;\r\n                }\r\n                if (typeof(key) === \"string\" && (key.includes(\"\\\"\"))) {\r\n                    key = key.slice(1, -1);\r\n                }\r\n\r\n                if (key && val !== undefined) {\r\n                    planRecord.assignment[key] = [];\r\n                    val.forEach(v => planRecord.assignment[key].push(distMap.indexOf(v)));\r\n                }\r\n            }\r\n        });\r\n        const place = places.find(p => p.id === planRecord.place.id);\r\n        return {\r\n            ...planRecord,\r\n            place\r\n        };\r\n    });\r\n}\r\n\r\nexport function loadPlanFromURL(url) {\r\n    return fetch(url)\r\n        .then(r => r.json())\r\n        .then(loadPlanFromJSON);\r\n}\r\n","import { signOut } from \"../api/auth\";\r\nimport { navigateTo } from \"../routes\";\r\n\r\nexport default () => {\r\n    signOut();\r\n    navigateTo(\"/\");\r\n};\r\n"],"names":["API_URL","location","hostname","includes","ApiClient","base_url","middleware","undefined","uri","method","body","headers","requestBody","JSON","stringify","fetch","reduce","requestOptions","request","signOut","localStorage","clear","routes","navigateTo","route","hasOwnProperty","assign","Error"],"mappings":"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"}